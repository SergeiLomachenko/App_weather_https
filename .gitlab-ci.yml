variables:
  IMAGE_NAME_PYTHON: sergeylomachenko/weather-app
  IMAGE_TAG_PYTHON: weather-app-python
  IMAGE_NAME_PHP: sergeylomachenko/weather-app
  IMAGE_TAG_PHP: weather-app-php

stages:          
  - test
  - build
  - deploy

unit_tests:
  stage: test
  image: python:3.9-slim-buster
  before_script:
    - pip install flask
    - pip install requests
    - pip install sqlalchemy schedule
  script:
    - python -m unittest test_database_connection.py

# lint_tests:
#   stage: test
#   image: python:3.9-slim-buster
#   before_script:
#     - apt-get update && apt-get install make
#   script:
#     - make test

build_image_python:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME_PYTHON:$IMAGE_TAG_PYTHON -f Dockerfile .
    - docker push $IMAGE_NAME_PYTHON:$IMAGE_TAG_PYTHON

build_image_php:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $REGISTRY_USER -p $REGISTRY_PASS
  script:
    - docker build -t $IMAGE_NAME_PHP:$IMAGE_TAG_PHP -f Dockerfile_php .
    - docker push $IMAGE_NAME_PHP:$IMAGE_TAG_PHP

deploy:
  stage: deploy
  image: ubuntu:22.04
  variables:
    REMOTE_USER : "ubuntu"
    REMOTE_PATH : "/home/ubuntu"
  before_script:
    - chmod 400 $KEY
    - apt-get update -y
    - apt-get install openssh-client -y
    - chmod -R +rX $CI_PROJECT_DIR/*  
  script:
    - ssh -o StrictHostKeyChecking=no -i $KEY $REMOTE_USER@$REMOTE_HOST
    - scp -o StrictHostKeyChecking=no -i $KEY -r $CI_PROJECT_DIR/* $REMOTE_USER@$REMOTE_HOST:$REMOTE_PATH
    - ssh -o StrictHostKeyChecking=no -i $KEY $REMOTE_USER@$REMOTE_HOST "sudo apt update && sudo apt upgrade -y && sudo apt install -y python3-pip && sudo pip install --no-cache-dir --no-warn-script-location -r requirements.txt"
    - ssh -o StrictHostKeyChecking=no -i $KEY $REMOTE_USER@$REMOTE_HOST "sudo apt install -y docker.io && sudo systemctl start docker && sudo systemctl restart docker && sudo apt install -y docker-compose && cd /home/ubuntu && sudo docker-compose build && sudo docker-compose up -d && sudo docker-compose restart"





